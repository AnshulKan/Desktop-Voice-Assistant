# ==============================================================================
# logger.py
# ------------------------------------------------------------------------------
# This module configures and provides logging functionality for the assistant.
# It sets up a file-based logger to record all user interactions, session
# start times, and any errors that occur, creating a persistent log file.
# ==============================================================================

import logging
from datetime import datetime

# Define the name of the log file
LOG_FILE = "assistant_log.txt"

# --- Configure the Python logging module ---
# This setup is done once when the module is first imported.
logging.basicConfig(
    level=logging.INFO,  # Set the minimum level of messages to be logged
    # Define the format for each log entry
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',  # Define the format for the timestamp
    # Specify the handlers. In this case, we're writing to a file.
    handlers=[
        logging.FileHandler(LOG_FILE)
    ]
)

def log_command(user_query, assistant_response, status="INFO"):
    """
    Logs the user's command and the assistant's response to the log file.

    Args:
        user_query (str): The text transcribed from the user's speech.
        assistant_response (str): The text response generated by the assistant.
        status (str): A status string ('INFO', 'ERROR', 'WARNING') to set the log level.
    """
    # Determine the appropriate logging level based on the status
    level = logging.INFO
    if status.upper() == "ERROR":
        level = logging.ERROR
    elif status.upper() == "WARNING":
        level = logging.WARNING
        
    # Log the user's query and the assistant's response at the determined level
    logging.log(level, f"User Query: '{user_query or 'No input detected'}'")
    logging.log(level, f"Assistant Response: '{assistant_response}' | Status: {status}")

def start_session():
    """
    Logs a formatted separator to the log file, marking the beginning of a new
    application session. This makes the log file easier to read and analyze.
    """
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    separator = f"\n{'='*25} NEW SESSION STARTED AT {timestamp} {'='*25}\n"
    
    # Since the logger is configured to write to a file, this info-level log
    # will be written directly into the assistant_log.txt file.
    logging.info(separator)

